{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get","athens.db/parse-hms","hms","cljs.core/coll?","p1__43256#","cljs.core.map","cljs.core.reduce","p__43257","vec__43258","cljs.core.nth","acc","v","cljs.core.assoc","athens.db/parse-tuples","tuples","cljs.core.partition","cljs.core/rest","p1__43262#","clojure.edn/read-string","p1__43263#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/schema","var_args","G__43266","athens.db/create-conn","js/Error","schema","reagent.core.atom","datascript.core/empty-db","cljs.core.atom","athens.db.create_conn","js/athens.db.dsdb","athens.db/dsdb","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","athens.db/q","seq43267","G__43268","cljs.core/next","self__4723__auto__","query","args","cljs.core/deref","cljs.core.apply","datascript.core/q","athens.db/q-rx","seq43270","G__43271","reagent.ratom/make-reaction","athens.db/pull","seq43272","self__4724__auto__","cljs.core/seq","datascript.core/pull","athens.db/pull-rx","seq43274","athens.db/pull*","seq43275","datascript.core/pull-many","athens.db/pull*-rx","seq43277","athens.db/transact!","datoms","datascript.core.transact_BANG_","athens.db/e-by-av","a","datascript.core.datoms","athens.db/v-by-ea","e","athens.db/rules","athens.db/inc-after","eid","order","G__43292","G__43293","G__43294","G__43295","G__43296","athens.db/dec-after","G__43306","G__43310","G__43312","G__43313","G__43314","athens.db/plus-after","x","G__43316","G__43317","G__43318","G__43319","G__43320","G__43321","athens.db/minus-after","G__43322","G__43323","G__43324","G__43325","G__43326","G__43327","athens.db/not-contains?","coll","cljs.core/contains?","athens.db/last-child?","uid","G__43340","G__43341","G__43342","G__43343","cljs.core.sort_by","cljs.core/second","cljs.core/last","cljs.core._EQ_","athens.db/sort-block-children","block","temp__5733__auto__","children","cljs.core/vec","athens.db/block-document-pull-vector","athens.db/node-document-pull-vector","cljs.core.conj","athens.db/get-block-document","id","athens.db.pull_rx","athens.db/get-node-document","athens.db/get-athens-datoms","p1__43358#","cljs.core.filter","athens.db/shape-parent-query","pull-results","b","res","cljs.core.dissoc","cljs.core/reverse","athens.db/get-parents-recursively","athens.db/get-block","athens.db/get-parent","G__43385","G__43386","datascript.core/entity","athens.db/get-older-sib","sib-uid","G__43387","G__43388","G__43389","G__43390","older-sib","athens.db/same-parent?","uids","parents","G__43392","G__43393","G__43394","cljs.core/count","athens.db/deepest-child-block","document","G__43395","G__43396","G__43397","map__43400","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","n","athens.db/get-children-recursively","temp__5735__auto__","G__43402","G__43403","G__43404","cljs.core/tree-seq","athens.db/retract-page-recursively","title","cljs.core.mapv","athens.db/retract-uid-recursively","athens.db/re-case-insensitive","cljs.core/re-pattern","athens.util/escape-str","athens.db/search-exact-node-title","G__43406","G__43407","G__43408","G__43411","athens.db/search-in-node-title","athens.db.search_in_node_title","ignore-dup","clojure.string/blank?","results","G__43412","G__43413","G__43414","G__43415","cljs.core.take","athens.db/get-root-parent-node","G__43418","athens.db/search-in-block-content","athens.db.search_in_block_content","G__43419","G__43420","G__43421","p1__43416#","athens.db/nth-sibling","map__43422","find-order","G__43424","G__43425","G__43426","G__43427","G__43428","athens.db/prev-block-uid","map__43429","parent","prev-sibling","open","prev-block","athens.db/next-sibling-recursively","map__43431","sib","node","or__4126__auto__","G__43434","athens.db/next-block-uid","map__43435","next-block-recursive","and__4115__auto__","selection?","athens.db.next_block_uid","js/athens.db.history","athens.db/history","athens.db/history-limit","athens.db/drop-tail","xs","pred","athens.db/trim-head","cljs.core.drop","athens.db/find-prev","p1__43437#","cljs.core.take_while","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__43438#","cljs.core.drop_while","athens.db/get-ref-ids","pattern","athens.db.q_rx","athens.db/merge-parents-and-block","ref-ids","cljs.core/reduce-kv","m","_","blocks","cljs.core.merge","athens.db/group-by-parent","cljs.core/group-by","athens.db/get-data","athens.db/get-linked-references","athens.db/get-linked-block-references","athens.db/get-unlinked-references","athens.patterns/unlinked","athens.db/linked-refs-count","G__43440","G__43441","G__43442","athens.db/replace-linked-refs","athens.patterns/linked","G__43443","G__43444","G__43445","new-str","clojure.string/replace","athens.db/pull-nil","db","selector","e43446","_e","cljs.core/PersistentVector"],"sourcesContent":["(ns athens.db\n  (:require\n    [athens.patterns :as patterns]\n    [athens.util :refer [escape-str]]\n    [clojure.edn :as edn]\n    [clojure.string :as string]\n    [datascript.core :as d]\n    [reagent.core :as reagent]\n    [reagent.ratom]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :db/filepath         nil\n               :db/synced           true\n               :db/mtime            nil\n               :current-route       nil\n               :loading?            true\n               :modal               false\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   false\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               :right-sidebar/width 32\n               :mouse-down          false\n               :daily-notes/items   []\n               :selected/items      []\n               :theme/dark          false})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:schema/version {}\n   :block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}\n   :block/refs     {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defn create-conn\n  ([schema] (reagent/atom\n              (d/empty-db schema)\n              :meta {:listeners (atom [])}))\n  ([] (create-conn nil)))\n\n\n(defonce dsdb (create-conn schema))\n\n\n(defn q\n  [query & args]\n  (apply d/q query @dsdb args))\n\n\n(defn q-rx\n  [query & args]\n  (reagent.ratom/make-reaction\n    #(apply\n       d/q query\n       @dsdb args)))\n\n\n(defn pull\n  [& args]\n  (apply d/pull @dsdb args))\n\n\n(defn pull-rx\n  [& args]\n  (reagent.ratom/make-reaction\n    #(apply d/pull @dsdb args)))\n\n\n(defn pull*\n  [& args]\n  (apply d/pull-many @dsdb args))\n\n\n(defn pull*-rx\n  [& args]\n  (reagent.ratom/make-reaction\n    #(apply d/pull-many @dsdb args)))\n\n\n(defn transact!\n  [datoms]\n  (d/transact! dsdb datoms))\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(defn v-by-ea\n  [e a]\n  (-> (d/datoms @dsdb :eavt e a) first :v))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(between ?p ?lower-bound ?upper-bound ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?lower-bound)]\n     [(< ?o ?upper-bound)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]\n    [(plus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(+ ?o ?x) ?new-o]]\n    [(minus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(- ?o ?x) ?new-o]]\n    [(siblings ?uid ?sib-e)\n     [?e :block/uid ?uid]\n     [?p :block/children ?e]\n     [?p :block/children ?sib-e]]])\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn plus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (plus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn minus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (minus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn not-contains?\n  [coll v]\n  (not (contains? coll v)))\n\n\n(defn last-child?\n  [uid]\n  (->> (d/q '[:find ?sib-uid ?sib-o\n              :in $ % ?uid\n              :where\n              (siblings ?uid ?sib)\n              [?sib :block/uid ?sib-uid]\n              [?sib :block/order ?sib-o]]\n            @dsdb rules uid)\n       (sort-by second)\n       last\n       first\n       (= uid)))\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(def block-document-pull-vector\n  '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :block/refs :block/_refs])\n\n\n(def node-document-pull-vector\n  (-> block-document-pull-vector\n      (conj :node/title :page/sidebar)))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull-rx block-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull-rx node-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-athens-datoms\n  \"Copy REPL output to athens-datoms.cljs\"\n  [id]\n  (->> @(pull-rx (filter #(not (or (= % :db/id) (= % :block/_refs))) node-document-pull-vector) id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull-rx '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull-rx '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]} :block/open] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn get-older-sib\n  [uid]\n  (let [sib-uid   (d/q '[:find ?uid .\n                         :in $ % ?target-uid\n                         :where\n                         (siblings ?target-uid ?sib)\n                         [?target-e :block/uid ?target-uid]\n                         [?target-e :block/order ?target-o]\n                         [(dec ?target-o) ?prev-sib-order]\n                         [?sib :block/order ?prev-sib-order]\n                         [?sib :block/uid ?uid]]\n                       @dsdb rules uid)\n        older-sib (get-block [:block/uid sib-uid])]\n    older-sib))\n\n\n(defn same-parent?\n  \"Given a coll of uids, determine if uids are all direct children of the same parent.\"\n  [uids]\n  (let [parents (d/q '[:find ?parents\n                       :in $ [?uids ...]\n                       :where\n                       [?e :block/uid ?uids]\n                       [?parents :block/children ?e]]\n                     @dsdb uids)]\n    (= (count parents) 1)))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> (d/pull @dsdb '[:block/order :block/uid {:block/children ...}] id)\n                      sort-block-children)]\n    (loop [block document]\n      (let [{:block/keys [children]} block\n            n (count children)]\n        (if (zero? n)\n          block\n          (recur (get children (dec n))))))))\n\n\n(defn get-children-recursively\n  \"Get list of children UIDs for given block ID (including the root block's UID)\"\n  [uid]\n  (when-let [eid (e-by-av :block/uid uid)]\n    (->> eid\n         (d/pull @dsdb '[:block/order :block/uid {:block/children ...}])\n         (tree-seq :block/children :block/children)\n         (map :block/uid))))\n\n\n(defn retract-page-recursively\n  \"Retract all blocks of a page, excluding the page. Used to reset athens/Welcome page.\n  Page is excluded because block/uid will be generated by walk-string if [[athens/Welcome]] doesn't already exist.\"\n  [title]\n  (let [eid (e-by-av :node/title title)\n        uid (v-by-ea eid :block/uid)]\n    (->> (get-children-recursively uid)\n         (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]))\n         next)))\n\n\n(defn retract-uid-recursively\n  \"Retract all blocks of a page, including the page.\"\n  [uid]\n  (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n        (get-children-recursively uid)))\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" (escape-str query))))\n\n\n(defn search-exact-node-title\n  [query]\n  (d/q '[:find (pull ?node [:db/id :node/title :block/uid]) .\n         :in $ ?query\n         :where [?node :node/title ?query]]\n       @dsdb\n       query))\n\n\n(defn search-in-node-title\n  ([query] (search-in-node-title query 20 false))\n  ([query n] (search-in-node-title query n false))\n  ([query n ignore-dup]\n   (if (string/blank? query)\n     (vector)\n     (let [results (->> (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n                               :in $ ?query-pattern ?query\n                               :where\n                               [?node :node/title ?title]\n                               [(re-find ?query-pattern ?title)]\n                               [(not= ?title ?query)]]                ;; ignore exact match to avoid duplicate\n                             @dsdb\n                             (re-case-insensitive query)\n                             (when ignore-dup query))\n                        (take n))]\n       results))))\n\n\n(defn get-root-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  ([query] (search-in-block-content query 20))\n  ([query n]\n   (if (string/blank? query)\n     (vector)\n     (->>\n       (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n              :in $ ?query-pattern\n              :where\n              [?block :block/string ?txt]\n              [(re-find ?query-pattern ?txt)]]\n            @dsdb\n            (re-case-insensitive query))\n       (take n)\n       (map get-root-parent-node)\n       (mapv #(dissoc % :block/_children))))))\n\n\n(defn nth-sibling\n  \"Find sibling that has order+n of current block.\n  Negative n means previous sibling.\n  Positive n means next sibling.\"\n  [uid n]\n  (let [block      (get-block [:block/uid uid])\n        {:block/keys [order]} block\n        find-order (+ n order)]\n    (d/q '[:find (pull ?sibs [*]) .\n           :in $ % ?curr-uid ?find-order\n           :where\n           (siblings ?curr-uid ?sibs)\n           [?sibs :block/order ?find-order]]\n         @dsdb rules uid find-order)))\n\n\n(defn prev-block-uid\n  \"If order 0, go to parent.\n   If order n but block is closed, go to prev sibling.\n   If order n and block is OPEN, go to prev sibling's deepest child.\"\n  [uid]\n  (let [block        (get-block [:block/uid uid])\n        parent       (get-parent [:block/uid uid])\n        prev-sibling (nth-sibling uid -1)\n        {:block/keys [open uid]} prev-sibling\n        prev-block   (cond\n                       (zero? (:block/order block)) parent\n                       (false? open) prev-sibling\n                       (true? open) (deepest-child-block [:block/uid uid]))]\n    (:block/uid prev-block)))\n\n\n(defn next-sibling-recursively\n  \"Search for next sibling. If not there (i.e. is last child), find sibling of parent.\n  If parent is root, go to next sibling.\"\n  [uid]\n  (loop [uid uid]\n    (let [sib    (nth-sibling uid +1)\n          parent (get-parent [:block/uid uid])\n          {node :node/title}   (get-block [:block/uid uid])]\n      (if (or sib (:node/title parent) node)\n        sib\n        (recur (:block/uid parent))))))\n\n\n(defn next-block-uid\n  \"1-arity:\n    if open and children, go to child 0\n    else recursively find next sibling of parent\n  2-arity:\n    used for multi-block-selection; ignores child blocks\"\n  ([uid]\n   (let [block                (->> (get-block [:block/uid uid])\n                                   sort-block-children)\n         {:block/keys [children open] node :node/title} block\n         next-block-recursive (next-sibling-recursively uid)]\n     (cond\n       (and (or open node) children) (:block/uid (first children))\n       next-block-recursive (:block/uid next-block-recursive))))\n  ([uid selection?]\n   (if selection?\n     (let [next-block-recursive (next-sibling-recursively uid)]\n       (:block/uid next-block-recursive))\n     (next-block-uid uid))))\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n#_(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n;; -- Linked & Unlinked References ----------\n\n(defn get-ref-ids\n  [pattern]\n  @(q-rx '[:find [?e ...]\n           :in $ ?regex\n           :where\n           [?e :block/string ?s]\n           [(re-find ?regex ?s)]]\n         pattern))\n\n\n(defn merge-parents-and-block\n  [ref-ids]\n  (let [parents (reduce-kv (fn [m _ v] (assoc m v (get-parents-recursively v)))\n                           {}\n                           ref-ids)\n        blocks (map (fn [id] (get-block-document id)) ref-ids)]\n    (mapv\n      (fn [block]\n        (merge block {:block/parents (get parents (:db/id block))}))\n      blocks)))\n\n\n(defn group-by-parent\n  [blocks]\n  (group-by (fn [x]\n              (-> x\n                  :block/parents\n                  first\n                  :node/title))\n            blocks))\n\n\n(defn get-data\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block group-by-parent seq))\n\n\n(defn get-linked-references\n  \"For node-page references UI.\"\n  [title]\n  (->> @(pull-rx '[* :block/_refs] [:node/title title])\n       :block/_refs\n       (mapv :db/id)\n       merge-parents-and-block\n       group-by-parent\n       vec))\n\n\n(defn get-linked-block-references\n  \"For block-page references UI.\"\n  [block]\n  (->> (:block/_refs block)\n       (mapv :db/id)\n       merge-parents-and-block\n       group-by-parent\n       vec))\n\n\n(defn get-unlinked-references\n  \"For node-page references UI.\"\n  [title]\n  (-> title patterns/unlinked get-data))\n\n\n(defn linked-refs-count\n  [title]\n  (d/q '[:find (count ?u) .\n         :in $ ?t\n         :where\n         [?e :node/title ?t]\n         [?r :block/refs ?e]\n         [?r :block/uid ?u]]\n       @dsdb\n       title))\n\n\n(defn replace-linked-refs\n  \"For a given title, unlinks [[brackets]], #[[brackets]], and #brackets.\"\n  [title]\n  (let [pattern (patterns/linked title)]\n    (->> pattern\n         get-ref-ids\n         (d/pull-many @dsdb [:db/id :block/string])\n         (mapv (fn [x]\n                 (let [new-str (string/replace (:block/string x) pattern title)]\n                   (assoc x :block/string new-str)))))))\n\n\n(defn pull-nil\n  [db selector id]\n  (try\n    (d/pull db selector id)\n    (catch js/Error _e\n      nil)))\n\n"]}