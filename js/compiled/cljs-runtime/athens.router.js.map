{"version":3,"sources":["athens/router.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","re_frame.core.reg_event_fx","p__58066","vec__58067","seq__58068","cljs.core/seq","first__58069","cljs.core/first","cljs.core/next","_","route","cljs.core/second","p__58070","p__58071","map__58072","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__58073","cljs.core.nth","new-match","e58077","old-match","controllers","reitit.frontend.controllers/apply-controllers","node","athens.dbrx.pull","athens.db/dsdb","node-title","cljs.core/deref","route-name","html-title-prefix","cljs.core._EQ_","html-title","js/document","cljs.core.assoc","cljs.core.dissoc","en","re_frame.core.inject_cofx","p__58078","map__58079","local-storage","re-frame.core/reg-fx","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__54730__auto__","result__54731__auto__","debux.common.util/send-trace!","e","e58081","reitit.frontend.easy/push-state","athens.router/routes","athens.router/router","reitit.frontend.router","reitit.coercion.spec/coercion","athens.router/on-navigate","re-frame.core/dispatch","athens.router/navigate","page","athens.router/nav-daily-notes","route-uid","re_frame.core.subscribe","athens.util/is-timeline-page","var_args","G__58083","athens.router/navigate-uid","js/Error","uid","current-route-uid","cljs.core.not_EQ_","shift","js/window","athens.router.navigate_uid","athens.router/init-routes!","cljs.core.prn","reitit.frontend.easy/start!"],"sourcesContent":["(ns athens.router\n  (:require\n    [athens.db :as db]\n    [athens.dbrx :refer [pull]]\n    [athens.util :as util]\n    #_[athens.views :as views]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :as rf :refer [subscribe dispatch reg-sub reg-event-fx reg-fx]]\n    [reitit.coercion.spec :as rss]\n    [reitit.frontend :as rfe]\n    [reitit.frontend.controllers :as rfc]\n    [reitit.frontend.easy :as rfee]))\n\n;; subs\n(reg-sub\n  :current-route\n  (fn [db]\n    (-> db :current-route)))\n\n\n(reg-sub\n  :current-route/uid\n  (fn [db]\n    (-> db :current-route :path-params :id)))\n\n\n(reg-sub\n  :current-route/name\n  (fn [db]\n    (-> db :current-route :data :name)))\n\n\n;; events\n(reg-event-fx\n  :navigate\n  (fn [_ [_ & route]]\n    {:navigate!          route\n     :local-storage/set! [\"current-route/uid\" (-> route second :id)]}))\n\n\n(reg-event-fx\n  :navigated\n  (fn [{:keys [db]} [_ new-match]]\n    (try\n      (let [old-match   (:current-route db)\n            controllers (rfc/apply-controllers (:controllers old-match) new-match)\n            node (pull db/dsdb '[*] [:block/uid (-> new-match :path-params :id)]) ;; TODO make the page title query work when zoomed in on a block\n            node-title (:node/title @node)\n            route-name (-> new-match :data :name)\n            html-title-prefix (cond\n                                node-title node-title\n                                (= route-name :pages) \"All Pages\"\n                                (= route-name :home) \"Daily Notes\")\n            html-title (if html-title-prefix\n                         (str html-title-prefix \" | Athens\")\n                         \"Athens\")]\n        (set! (.-title js/document) html-title)\n        {:db (-> db\n                 (assoc :current-route (assoc new-match :controllers controllers))\n                 (dissoc :merge-prompt))\n         :timeout {:action :clear\n                   :id :merge-prompt}})\n      (catch :default en\n        {:db db\n         :timeout {:action :clear\n                   :id :merge-prompt}}))))\n\n\n(reg-event-fx\n  :local-storage/navigate\n  [(rf/inject-cofx :local-storage \"current-route/uid\")]\n  (fn [{:keys [local-storage]} _]\n    (if (= \"null\" local-storage)\n      {:dispatch [:navigate :home]}\n      {:dispatch [:navigate :page {:id local-storage}]})))\n\n\n;; effects\n\n(reg-fx\n  :navigate!\n  (fn-traced [route]\n             (apply rfee/push-state route)))\n\n;; router definition\n\n(def routes\n  [\"/\"\n   [\"\" {:name :home}]\n   [\"settings\" {:name :settings}]\n   [\"pages\" {:name :pages}]\n   [\"page/:id\" {:name :page}]\n   [\"graph\" {:name :graph}]])\n\n\n(def router\n  (rfe/router\n    routes\n    {:data {:coercion rss/coercion}}))\n\n\n(defn on-navigate\n  [new-match]\n  (when new-match\n    (dispatch [:navigated new-match])))\n\n\n(defn navigate\n  [page]\n  (dispatch [:navigate page]))\n\n\n(defn nav-daily-notes\n  \"When user is already on a date node-page, clicking on daily notes goes to that date and allows scrolling.\"\n  []\n  (let [route-uid @(subscribe [:current-route/uid])]\n    (if (util/is-timeline-page route-uid)\n      (dispatch [:daily-notes/add route-uid])\n      (dispatch [:daily-notes/reset]))\n    (navigate :home)))\n\n\n(defn navigate-uid\n  \"Don't navigate if already on the page.\"\n  ([uid]\n   (let [current-route-uid @(subscribe [:current-route/uid])]\n     (when (not= current-route-uid uid)\n       (dispatch [:navigate :page {:id uid}]))))\n  ([uid e]\n   (let [shift (.. e -shiftKey)]\n     (if shift\n       (do\n         (.. js/window getSelection empty)\n         (.. e preventDefault)\n         (dispatch [:right-sidebar/open-item uid]))\n       (navigate-uid uid)))))\n\n\n(defn init-routes!\n  []\n  (prn \"Initializing routes\")\n  (rfee/start!\n    router\n    on-navigate\n    {:use-fragment true}))\n"]}